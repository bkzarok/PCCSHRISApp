@model Tuple<IEnumerable<WordCount>, IEnumerable<WordCount> , IEnumerable<WordCount> ,IEnumerable<WordCount>, IEnumerable<WordCount> >;

@{
    ViewData["Title"] = "Home Page";
}
<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <div class="row">
        <div class="col-md">
            <img src="~/pccs.png" width="200" />
        </div>
        <div class="col-md">
            <img src="~/MODVA Code2.jpg" width="150" />
        </div>
        <div class="col-md">
            <img src="~/SSPDF Flag.png" width="200" />
        </div>

    </div>

    <h2>REPUBLIC OF SOUTH SUDAN</h2>
    <h2>MINISTRY OF DEFENCE AND VETERANS AFFAIRS</h2>
    <h1>MODVA</h1>
    <div class="container">
</div>

<hr />
    <h2 class="text-center">Charts</h2>
   
    <div class="row">

        <div class="col-md" style="margin-top:50px">
            <div class="card" style="width:30rem;" >
                <div class="card-header">
                    <h4>Rank Count</h4>
                </div>
                <canvas id="rankBarChart"></canvas>

            </div>
        </div>

        <div class="col-md" style="margin-top:50px">
            <div class="card" style="width:30rem;">
                <div class="card-header">
                    <h4>BloodGroup Count</h4>
                </div>
                <canvas id="bloodGroupBarChart"></canvas>
            </div>
        </div>

        <div class="col-md" style="margin-top:50px">
            <div class="card" style="width:30rem;">
                <div class="card-header">
                    <h4>Gender Count</h4>
                </div>
                <canvas id="genderDoughnutChart"></canvas>
            </div>
        </div>

        <div class="col-md" style="margin-top:50px">
            <div class="card" style="width:30rem;">
                <div class="card-header">
                    <h4>Ethnicity Count</h4>
                </div>
                <canvas id="ethnicityChart"></canvas>

            </div>
        </div>

        <div class="col-md" style="margin-top:50px">
            <div class="card" style="width:30rem;">
                <div class="card-header">
                    <h4>BirthDay Count</h4>
                </div>
                <canvas id="birthdayLineChart"></canvas>
            </div>
        </div>
    </div>

</div>



@section scripts {

    <script type="text/javascript">

        var rankcount = @Html.Raw(Json.Serialize(Model.Item1));
        var bloodGroupCount = @Html.Raw(Json.Serialize(Model.Item2));
        var genderCount = @Html.Raw(Json.Serialize(Model.Item3));
        var ethnicityCount = @Html.Raw(Json.Serialize(Model.Item4));
        var birthdayCount = @Html.Raw(Json.Serialize(Model.Item5));

        console.log(JSON.stringify(rankcount));

        var rankWords = rankcount.map(function (item) {

            return `${item.word}`;
        });

        var rankCounts = rankcount.map(function (item) {
            return `${item.count}`;
        });


        const rankData = {
            labels: rankWords,
            datasets: [{
                label: '# of Ranks',
                data: rankCounts,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(255, 159, 64, 0.2)',
                    'rgba(255, 205, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(201, 203, 207, 0.2)'
                ],
                borderColor: [
                    'rgb(255, 99, 132)',
                    'rgb(255, 159, 64)',
                    'rgb(255, 205, 86)',
                    'rgb(75, 192, 192)',
                    'rgb(54, 162, 235)',
                    'rgb(153, 102, 255)',
                    'rgb(201, 203, 207)'
                ],
                borderWidth: 1
            }]
        };

        var bloodGroupWords = bloodGroupCount.map(function (item) {

            return `${item.word}`;
        });

        var bloodGroupCounts = bloodGroupCount.map(function (item) {
            return `${item.count}`;
        });

        const bloodGroupData = {
            labels: bloodGroupWords,
            datasets: [{
                label: '# of BloodGroups',
                data: bloodGroupCounts,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(255, 159, 64, 0.2)',
                    'rgba(255, 205, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(201, 203, 207, 0.2)'
                ],
                borderColor: [
                    'rgb(255, 99, 132)',
                    'rgb(255, 159, 64)',
                    'rgb(255, 205, 86)',
                    'rgb(75, 192, 192)',
                    'rgb(54, 162, 235)',
                    'rgb(153, 102, 255)',
                    'rgb(201, 203, 207)'
                ],
                borderWidth: 1
            }]
        };

        var genderWords = genderCount.map(function (item) {
            return `${item.word}`;
        });

        var genderCounts = genderCount.map(function (item) {
            return `${item.count}`;
        });

        const genderData = {
            labels: genderWords,
            datasets: [{
                label: '# of Genders',
                data: genderCounts,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(255, 159, 64, 0.2)',
                    'rgba(255, 205, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(201, 203, 207, 0.2)'
                ],
                borderColor: [
                    'rgb(255, 99, 132)',
                    'rgb(255, 159, 64)',
                    'rgb(255, 205, 86)',
                    'rgb(75, 192, 192)',
                    'rgb(54, 162, 235)',
                    'rgb(153, 102, 255)',
                    'rgb(201, 203, 207)'
                ],
                borderWidth: 1
            }]
        };

        console.log(JSON.stringify(ethnicityCount));

        var ethnicityWords = ethnicityCount.map(function (item) {

            return `${item.word}`;
        });

        var ethnicityCounts = ethnicityCount.map(function (item) {
            return `${item.count}`;
        });


        const ethnicityData = {
            labels: ethnicityWords,
            datasets: [{
                label: '# of Ethnicities',
                data: ethnicityCounts,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(255, 159, 64, 0.2)',
                    'rgba(255, 205, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(201, 203, 207, 0.2)'
                ],
                borderColor: [
                    'rgb(255, 99, 132)',
                    'rgb(255, 159, 64)',
                    'rgb(255, 205, 86)',
                    'rgb(75, 192, 192)',
                    'rgb(54, 162, 235)',
                    'rgb(153, 102, 255)',
                    'rgb(201, 203, 207)'
                ],
                borderWidth: 1
            }]
        };


        var birthdayWords = birthdayCount.map(function (item) {

            return `${item.word}`;
        });

        var birthdayCounts = birthdayCount.map(function (item) {
            return `${item.count}`;
        });

        const birthdayData = {
            labels: birthdayWords,
            datasets: [{
                label: '# of Ranks',
                data: birthdayCounts,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(255, 159, 64, 0.2)',
                    'rgba(255, 205, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(201, 203, 207, 0.2)'
                ],
                borderColor: [
                    'rgb(255, 99, 132)',
                    'rgb(255, 159, 64)',
                    'rgb(255, 205, 86)',
                    'rgb(75, 192, 192)',
                    'rgb(54, 162, 235)',
                    'rgb(153, 102, 255)',
                    'rgb(201, 203, 207)'
                ],
                borderWidth: 1
            }]
        };

        const rankBarChart = document.getElementById('rankBarChart');
        const bloodGroupBarChart = document.getElementById('bloodGroupBarChart');
        const genderDoughnutChart = document.getElementById('genderDoughnutChart');
        const birthdayLineChart = document.getElementById('birthdayLineChart');
        const ethinicityChart = document.getElementById('ethnicityChart');


        new Chart(rankBarChart, {
            type: 'doughnut',
            data: rankData,
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        new Chart(bloodGroupBarChart, {
            type: 'bar',
            data: bloodGroupData,
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        new Chart(genderDoughnutChart, {
            type: 'doughnut',
            data: genderData,
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        new Chart(birthdayLineChart, {
            type: 'bar',
            data: birthdayData,
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        new Chart(ethinicityChart, {
            type: 'doughnut',
            data: ethnicityData,
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });



    </script>

}